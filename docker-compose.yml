version: '3.8'

services:
    # ===============================================
    # REVERSE PROXY (Pintu Masuk Utama)
    # ===============================================
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - '80:80' # Port HTTP
            - '443:443' # Port HTTPS
        volumes:
            # Mount file konfigurasi Nginx
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            # Mount folder yang berisi sertifikat SSL
            - ./nginx/ssl:/etc/nginx/ssl
        depends_on:
            - api-gateway
        networks:
            - hibiki-network

    # ===============================================
    # API GATEWAY
    # ===============================================
    api-gateway:
        build:
            context: ./api-gateway
            dockerfile: Dockerfile
        container_name: api-gateway
        restart: unless-stopped
        # ports:
        #     - '3000:3000'
        environment:
            - PORT=3000
            - JWT_SECRET=${JWT_SECRET}
            - USER_SERVICE_URL=http://user-service:3001
            - LOGGING_SERVICE_URL=http://logging-service:3002
            - NOTIFICATION_SERVICE_URL=http://notification-service:3003
            - TASK_SERVICE_URL=http://task-service:3004
        depends_on:
            - user-service
            - task-service
            - notification-service
            - logging-service
        networks:
            - hibiki-network

    # ===============================================
    # DATABASE SERVICES
    # ===============================================
    db-users:
        image: mysql:8.0
        container_name: db-users
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: hibiki_point_user_db
            MYSQL_ROOT_PASSWORD: root
        ports:
            - '3306:3306'
        volumes:
            - user-data:/var/lib/mysql
        networks:
            - hibiki-network
        healthcheck:
            test:
                [
                    'CMD',
                    'mysqladmin',
                    'ping',
                    '-h',
                    'localhost',
                    '-u',
                    'root',
                    '-proot',
                ]
            timeout: 20s
            retries: 10
            start_period: 30s

    db-logging:
        image: mysql:8.0
        container_name: db-logging
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: hibiki_point_logging_db
            MYSQL_ROOT_PASSWORD: root
        ports:
            - '3307:3306'
        volumes:
            - logging-data:/var/lib/mysql
        networks:
            - hibiki-network
        healthcheck:
            test:
                [
                    'CMD',
                    'mysqladmin',
                    'ping',
                    '-h',
                    'localhost',
                    '-u',
                    'root',
                    '-proot',
                ]
            interval: 5s
            timeout: 20s
            retries: 10
            start_period: 30s

    db-notification:
        image: mysql:8.0
        container_name: db-notification
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: hibiki_point_notification_db
            MYSQL_ROOT_PASSWORD: root
        ports:
            - '3308:3306'
        volumes:
            - notification-data:/var/lib/mysql
        networks:
            - hibiki-network
        healthcheck:
            test:
                [
                    'CMD',
                    'mysqladmin',
                    'ping',
                    '-h',
                    'localhost',
                    '-u',
                    'root',
                    '-proot',
                ]
            timeout: 20s
            retries: 10
            start_period: 30s

    db-task:
        image: mysql:8.0
        container_name: db-task
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: hibiki_point_task_db
            MYSQL_ROOT_PASSWORD: root
        ports:
            - '3309:3306'
        volumes:
            - task-data:/var/lib/mysql
        networks:
            - hibiki-network
        healthcheck:
            test:
                [
                    'CMD',
                    'mysqladmin',
                    'ping',
                    '-h',
                    'localhost',
                    '-u',
                    'root',
                    '-proot',
                ]
            timeout: 20s
            retries: 10
            start_period: 30s

    # ===============================================
    # MESSAGE BROKER
    # ===============================================
    rabbitmq:
        image: rabbitmq:3.13-management
        container_name: rabbitmq
        ports:
            - '5672:5672' # Port untuk aplikasi
            - '15672:15672' # Port untuk Management UI
        networks:
            - hibiki-network
        healthcheck:
            test:
                ['CMD', 'rabbitmq-diagnostics', 'check_port_connectivity', '-q']
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 30s

    # ===============================================
    # APPLICATION SERVICES
    # ===============================================
    user-service:
        build:
            context: ./services/user-service
            dockerfile: Dockerfile
        container_name: user-service
        restart: unless-stopped
        ports:
            - '3001:3001'
        environment:
            - PORT=3001
            - MYSQL_DB=hibiki_point_user_db
            - MYSQL_USER=root
            - MYSQL_PASSWORD=root
            - MYSQL_HOST=db-users
            - JWT_SECRET=namanya_juga_rahasia
            - RABBITMQ_URL=amqp://rabbitmq # Terhubung ke service rabbitmq
        depends_on:
            db-users:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - hibiki-network

    logging-service:
        build:
            context: ./services/logging-service
            dockerfile: Dockerfile
        container_name: logging-service
        restart: unless-stopped
        ports:
            - '3002:3002'
        environment:
            - PORT=3002
            - MYSQL_DB=hibiki_point_logging_db
            - MYSQL_USER=root
            - MYSQL_PASSWORD=root
            - MYSQL_HOST=db-logging
            - RABBITMQ_URL=amqp://rabbitmq # Terhubung ke service rabbitmq
        depends_on:
            db-logging:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - hibiki-network

    notification-service:
        build:
            context: ./services/notification-service
            dockerfile: Dockerfile
        container_name: notification-service
        restart: unless-stopped
        ports:
            - '3003:3003'
        environment:
            - PORT=3003
            - MYSQL_DB=hibiki_point_notification_db
            - MYSQL_USER=root
            - MYSQL_PASSWORD=root
            - MYSQL_HOST=db-notification
            - RABBITMQ_URL=amqp://rabbitmq # Terhubung ke service rabbitmq
        depends_on:
            db-notification:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - hibiki-network

    task-service:
        build:
            context: ./services/task-service
            dockerfile: Dockerfile
        container_name: task-service
        restart: unless-stopped
        ports:
            - '3004:3004'
        environment:
            - PORT=3004
            - MYSQL_DB=hibiki_point_task_db
            - MYSQL_USER=root
            - MYSQL_PASSWORD=root
            - MYSQL_HOST=db-task
            - RABBITMQ_URL=amqp://rabbitmq # Terhubung ke service rabbitmq
        depends_on:
            db-task:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - hibiki-network

# ===============================================
# SHARED RESOURCES
# ===============================================
volumes:
    user-data:
    logging-data:
    notification-data:
    task-data:

networks:
    hibiki-network:
        driver: bridge
